#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: kenzo
#=================================================

name: MyLEDE

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        type: boolean
        description: 'ssh'
        required: false
        default: false
      ssh_debug:
        type: boolean
        description: 'ssh配置包'
        required: false
        default: false

env:
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  PASSWORD: ${{ secrets.PASSWORD }}
  REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
  DOCKER_ID: ${{ secrets.DOCKER_ID }}
  DOCKER_PASSWD: ${{ secrets.DOCKER_PASSWD }}  
  TZ: Asia/Shanghai

jobs:
  merge:
    runs-on: ubuntu-latest
    # if: github.event.repository.owner.id == github.event.sender.id

    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [Lean]
    
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Free disk space
      uses: coder-xiaomo/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true      

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
        python3-setuptools rsync swig unzip zlib1g-dev file wget \
        llvm python3-pyelftools libpython3-dev aria2 jq qemu-utils ccache rename \
        libelf-dev device-tree-compiler libgmp3-dev libmpc-dev libfuse-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "Asia/Shanghai"
        
    - name: Get current date
      id: date
      run: |
        echo "date=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
        echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV
        echo "DOCKERTAG=${{ secrets.DOCKER_ID }}/openwrt-6p:latest" >> $GITHUB_ENV
        VERSION="$(echo "${{github.event.action}}" | grep -Eo " [0-9.]+" | sed -e 's/ //')" || true
        [ "$VERSION" ] && echo "VERSION=$VERSION" >> $GITHUB_ENV || echo "VERSION=$(date +'%m.%d')" >> $GITHUB_ENV
        
    - name: Clone source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        sed -i '$a src-git smpackage https://github.com/kenzok8/small-package' feeds.conf.default

    - name: Free up disk space
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p -m 777 /mnt/openwrt/dl /mnt/openwrt/bin /mnt/openwrt/staging_dir
        ln -sf /mnt/openwrt/dl openwrt/dl
        ln -sf /mnt/openwrt/bin openwrt/bin
        ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir

    - name: Update feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a

    # =================================================================
    # MODIFIED STEP: 优先读取 seed 目录下的配置文件
    # =================================================================
    - name: Defconfig ${{matrix.target}}
      run: |
        # 优先检查并使用 seed 目录下的配置文件
        if [ -f "seed/${{matrix.target}}.config" ]; then
          echo "✅ Found config in 'seed' directory, using it."
          cp "seed/${{matrix.target}}.config" "openwrt/.config"
        else
          echo "⚠️ No config in 'seed' directory. Using default and will create one after build."
        fi
        
        # 运行自定义脚本
        chmod +x ./customize.sh && ./customize.sh
        cd openwrt
        
        # 其他的准备工作
        rm -rf feeds/packages/lang/golang
        git clone https://github.com/kenzok8/golang feeds/packages/lang/golang
        rm -rf feeds/luci/applications/luci-app-openclash
        cp -f feeds/smpackage/.github/diy/default-settings package/lean/default-settings/files/zzz-default-settings
        cp -f feeds/smpackage/.github/diy/banner package/base-files/files/etc/banner
        sed -i "s/%D %V, %C/openwrt $(date +'%m.%d')/g" package/base-files/files/etc/banner
        sed -i 's/luci-theme-bootstrap/luci-theme-argon/g' feeds/luci/collections/luci/Makefile
        
        # 更新与安装 feeds
        ./scripts/feeds update -a
        sed -i 's#GO_PKG_TARGET_VARS.*# #g' feeds/packages/utils/v2dat/Makefile
        ./scripts/feeds install -a
        
        # 如果 .config 文件不存在 (因为 seed 中没有), 则从默认路径复制
        if [ ! -f .config ]; then
          cp -f feeds/smpackage/.github/diy/${{matrix.target}}.config .config
        fi
        
        # 生成最终 .config
        make defconfig

    - name: Setup tmate session if SSH is enabled
      uses: csexton/debugger-action@master
      if: github.event.inputs.ssh_debug == 'true'

    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(($(nproc)+1))
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Cache
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ${{ matrix.target }}
        clean: ${{ contains(github.event.action, 'nocache') }}
        prefix: ${{ github.workspace }}/openwrt
    
    - name: Check space usage
      run: |
        shopt -s extglob
        cd openwrt
        if [[ -f staging_dir/*${{ env.MTARGET }}*/bin ]]; then
          rm -rf staging_dir/!(*${{ env.MTARGET }}*|host|hostpkg) build_dir/!(*${{ env.MTARGET }}*|host|hostpkg)
        fi
        df -hT

    - name: Compile the firmware
      working-directory: ./openwrt
      run: |
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s

    # =================================================================
    # NEW STEP: 保存本次的配置文件并提交回仓库
    # =================================================================
    - name: Save and commit config file
      if: success() && !cancelled()
      run: |
        # 如果 seed 目录不存在则创建
        mkdir -p seed
        
        # 从编译目录复制最终的 .config 文件
        cp openwrt/.config seed/${{matrix.target}}.config
        
        # 配置 git 用户信息
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # 添加文件并检查是否有变动
        git add seed/${{matrix.target}}.config
        if git diff --staged --quiet; then
          echo "✅ Config file has not changed. Skipping commit."
        else
          # 如果有变动，则提交并推送到仓库
          echo "💾 New config detected. Committing and pushing..."
          git commit -m "Update ${{matrix.target}}.config from workflow build"
          git push
        fi

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        mkdir firmware
        mv -f openwrt/bin/targets/*/*/{*combined*,*sysupgrade*} ./firmware/ 2>/dev/null || true
        cp openwrt/.config  ./firmware/${{matrix.target}}.config
        cp openwrt/build_dir/target-*/linux-*/linux-*/.config ./firmware/${{matrix.target}}_kernel.config
        cd firmware
        echo "v${{ env.date2 }}" > version.txt
        md5=$((md5sum *squashfs-sysupgrade* || md5sum *squashfs-combined-efi*) | awk '{print $1}') 2>/dev/null
        echo $md5 >> version.txt
        rename -v "s/^openwrt/${{ env.VERSION }}-openwrt/" * || true
        rename -v "s/friendlyarm_//" *gz || true
        echo $md5 >> version.txt
        echo ${{matrix.target}} >> version.txt
        rm -rf sha25sums
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        
    - name: Deploy imagebuilder to server
      uses: easingthemes/ssh-deploy@main
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        ARGS: "-avzr --exclude="
        SOURCE: firmware/
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
        REMOTE_USER: root
        TARGET: "/www/wwwroot/${{ secrets.REMOTE_HOST }}/op/firmware/${{matrix.target}}/"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.date3 }}_${{matrix.target}}
        path: ${{ env.FIRMWARE }}
        
    - name: Set Up Docker Buildx
      uses: docker/setup-buildx-action@master
      if: env.DOCKER_ID && env.DOCKER_PASSWD

    - name: Login To DockerHub
      uses: docker/login-action@master
      if: env.DOCKER_ID && env.DOCKER_PASSWD
      with:
        username: ${{ secrets.DOCKER_ID }}
        password: ${{ secrets.DOCKER_PASSWD }}
        
    - name: Build and push docker image
      uses: docker/build-push-action@master
      continue-on-error: true
      if: env.DOCKER_ID && env.DOCKER_PASSWD && ! contains(github.event.action, 'noser')
      with:
        platforms: ${{ env.ARCH }}
        file: Dockerfile
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_ID }}/openwrt-6p:${{matrix.target}}
          ${{ env.DOCKERTAG }}        

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo -e "墙内外加速下载 🎈:\n" >> release.txt
        echo -e "[kenzo] (https://${{ secrets.REMOTE_HOST }}/op/firmware/${{matrix.target}})\n" >> release.txt
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        files: "${{ env.FIRMWARE }}/*"
        name: ${{ env.date2 }} ${{matrix.target}}
        tag_name: ${{ env.date }}_${{matrix.target}}
        body_path: release.txt

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 0

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 6
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
